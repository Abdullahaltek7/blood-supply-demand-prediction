{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOWzo0C6K396Q8hwoB5u/ck",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Abdullahaltek7/blood-supply-demand-prediction/blob/main/Blood%20Supply-Demand%20Prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "# Task\n",
        "*\"Develop a machine learning or deep learning model to analyze and predict blood supply-demand trends using a dataset of blood type distribution across different countries. The workflow should include the following steps:\"*  \n",
        "\n",
        "### **1. Data Preprocessing**  \n",
        "- Load and clean the dataset.  \n",
        "- Convert population and blood group percentages into numerical values.  \n",
        "- Handle missing data using appropriate techniques (e.g., mean/mode imputation).  \n",
        "\n",
        "### **2. Feature Engineering**  \n",
        "- Calculate the estimated number of people for each blood type in each country.  \n",
        "- Categorize countries by continent or region.  \n",
        "- Identify trends in blood type distribution.  \n",
        "\n",
        "### **3. Model Training & Prediction**  \n",
        "- Use **machine learning models** (e.g., Random Forest, XGBoost) or **deep learning models** (e.g., LSTM, GRU) to predict future blood demand.  \n",
        "- Train the model using historical blood distribution data.  \n",
        "- Evaluate model performance using appropriate metrics (e.g., RMSE for regression, accuracy for classification).  \n",
        "\n",
        "### **4. Insights & Recommendations**  \n",
        "- Identify countries at risk of blood shortages.  \n",
        "- Suggest the best times for blood donation campaigns based on predicted demand.  \n",
        "\n",
        "*\"The goal is to develop a simple, effective prediction model that helps optimize blood donation efforts without requiring an API or advanced deployment.\"*  \n",
        "\n",
        "\n",
        "\n",
        "Here is all the data you need:\n",
        "\"blood_type_distribution_by_country.csv\""
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "WxI1STBG14M4"
      }
    },
    {
      "source": [
        "## Data loading\n",
        "\n",
        "### Subtask:\n",
        "Load the \"blood_type_distribution_by_country.csv\" dataset into a Pandas DataFrame.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "e_7c4V2R14cu"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Load the CSV file into a pandas DataFrame.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "JPCS6j8U14sm"
      }
    },
    {
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('blood_type_distribution_by_country.csv')\n",
        "display(df.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "WmxhM4oC148e",
        "outputId": "43ccd096-e937-4f00-89bc-ebbbddc4b5b4"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "UnicodeDecodeError",
          "evalue": "'utf-8' codec can't decode byte 0xa0 in position 57: invalid start byte",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mUnicodeDecodeError\u001b[0m                        Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-731ddd7ea9a9>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'blood_type_distribution_by_country.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1896\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1897\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1898\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1899\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1900\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     91\u001b[0m             \u001b[0;31m# Fail here loudly instead of in cython after reading\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m             \u001b[0mimport_optional_dependency\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"pyarrow\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 93\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._get_header\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._tokenize_rows\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._check_tokenize_status\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mparsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.raise_parser_error\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mUnicodeDecodeError\u001b[0m: 'utf-8' codec can't decode byte 0xa0 in position 57: invalid start byte"
          ]
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "The previous code block failed due to encoding issues. We need to specify the encoding explicitly when reading the CSV file to handle potential non-UTF-8 characters.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "g4lLzQZd16yP"
      }
    },
    {
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('blood_type_distribution_by_country.csv', encoding='latin-1')\n",
        "display(df.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "I38jupXd17CD",
        "outputId": "b9940641-6481-4784-d6f2-98c49ec416c5"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  Country/Dependency  Population      O+      A+      B+    AB+     O-     A-  \\\n",
              "0         Albania[2]   3,074,579  34.10%  31.20%  14.50%  5.20%  6.00%  5.50%   \n",
              "1         Algeria[3]  43,576,691  40.00%  30.00%  15.00%  4.25%  6.60%  2.30%   \n",
              "2       Argentina[4]  45,479,118  50.34%  31.09%   8.20%  2.16%  4.29%  2.98%   \n",
              "3         Armenia[5]   3,021,324  29.00%  46.30%  12.00%  5.60%  2.00%  3.70%   \n",
              "4       Australia[6]  25,466,459  38.00%  32.00%  12.00%  4.00%  7.00%  6.00%   \n",
              "\n",
              "      B-    AB-  \n",
              "0  2.60%  0.90%  \n",
              "1  1.10%  0.75%  \n",
              "2  0.74%  0.20%  \n",
              "3  1.00%  0.40%  \n",
              "4  2.00%  1.00%  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-24ef5a74-c2bb-4169-9e77-c89f7f500e38\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country/Dependency</th>\n",
              "      <th>Population</th>\n",
              "      <th>O+</th>\n",
              "      <th>A+</th>\n",
              "      <th>B+</th>\n",
              "      <th>AB+</th>\n",
              "      <th>O-</th>\n",
              "      <th>A-</th>\n",
              "      <th>B-</th>\n",
              "      <th>AB-</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Albania[2]</td>\n",
              "      <td>3,074,579</td>\n",
              "      <td>34.10%</td>\n",
              "      <td>31.20%</td>\n",
              "      <td>14.50%</td>\n",
              "      <td>5.20%</td>\n",
              "      <td>6.00%</td>\n",
              "      <td>5.50%</td>\n",
              "      <td>2.60%</td>\n",
              "      <td>0.90%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Algeria[3]</td>\n",
              "      <td>43,576,691</td>\n",
              "      <td>40.00%</td>\n",
              "      <td>30.00%</td>\n",
              "      <td>15.00%</td>\n",
              "      <td>4.25%</td>\n",
              "      <td>6.60%</td>\n",
              "      <td>2.30%</td>\n",
              "      <td>1.10%</td>\n",
              "      <td>0.75%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Argentina[4]</td>\n",
              "      <td>45,479,118</td>\n",
              "      <td>50.34%</td>\n",
              "      <td>31.09%</td>\n",
              "      <td>8.20%</td>\n",
              "      <td>2.16%</td>\n",
              "      <td>4.29%</td>\n",
              "      <td>2.98%</td>\n",
              "      <td>0.74%</td>\n",
              "      <td>0.20%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Armenia[5]</td>\n",
              "      <td>3,021,324</td>\n",
              "      <td>29.00%</td>\n",
              "      <td>46.30%</td>\n",
              "      <td>12.00%</td>\n",
              "      <td>5.60%</td>\n",
              "      <td>2.00%</td>\n",
              "      <td>3.70%</td>\n",
              "      <td>1.00%</td>\n",
              "      <td>0.40%</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Australia[6]</td>\n",
              "      <td>25,466,459</td>\n",
              "      <td>38.00%</td>\n",
              "      <td>32.00%</td>\n",
              "      <td>12.00%</td>\n",
              "      <td>4.00%</td>\n",
              "      <td>7.00%</td>\n",
              "      <td>6.00%</td>\n",
              "      <td>2.00%</td>\n",
              "      <td>1.00%</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-24ef5a74-c2bb-4169-9e77-c89f7f500e38')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-24ef5a74-c2bb-4169-9e77-c89f7f500e38 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-24ef5a74-c2bb-4169-9e77-c89f7f500e38');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1f2c452e-9191-4fe9-898f-1518182f5359\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f2c452e-9191-4fe9-898f-1518182f5359')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1f2c452e-9191-4fe9-898f-1518182f5359 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Country/Dependency\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"\\u00a0Algeria[3]\",\n          \"\\u00a0Australia[6]\",\n          \"\\u00a0Argentina[4]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"43,576,691\",\n          \"25,466,459\",\n          \"45,479,118\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O+\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"40.00%\",\n          \"38.00%\",\n          \"50.34%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A+\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"30.00%\",\n          \"32.00%\",\n          \"31.09%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B+\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"15.00%\",\n          \"12.00%\",\n          \"14.50%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB+\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"4.25%\",\n          \"4.00%\",\n          \"2.16%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O-\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"6.60%\",\n          \"7.00%\",\n          \"4.29%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A-\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2.30%\",\n          \"6.00%\",\n          \"2.98%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B-\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"1.10%\",\n          \"2.00%\",\n          \"0.74%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB-\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0.75%\",\n          \"1.00%\",\n          \"0.20%\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "## Data cleaning\n",
        "\n",
        "### Subtask:\n",
        "Clean the loaded DataFrame `df` by handling missing values and ensuring data consistency.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "F_SSU66L1_CS"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Handle missing values and ensure data consistency in the dataframe `df`.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "rMVETMNS2AZo"
      }
    },
    {
      "source": [
        "# Handle missing values\n",
        "for column in df.columns:\n",
        "    if df[column].isnull().any():\n",
        "        if pd.api.types.is_numeric_dtype(df[column]):\n",
        "            df[column] = df[column].str.replace(',', '').str.replace('%', '').astype(float).fillna(df[column].mean())\n",
        "        else:\n",
        "            df[column] = df[column].fillna(df[column].mode()[0])\n",
        "\n",
        "# Ensure data consistency for blood type columns\n",
        "blood_type_columns = ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-']\n",
        "for column in blood_type_columns:\n",
        "    df[column] = df[column].str.replace('%', '').astype(float)\n",
        "\n",
        "# Standardize country names (remove leading spaces and special characters)\n",
        "df['Country/Dependency'] = df['Country/Dependency'].str.strip()\n",
        "df['Country/Dependency'] = df['Country/Dependency'].str.replace('[\\[\\]\\d]', '', regex=True)\n",
        "\n",
        "\n",
        "# Remove duplicate rows\n",
        "df = df.drop_duplicates()\n",
        "\n",
        "# Print the updated DataFrame\n",
        "print(df.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "0GGwuNgo2ApY",
        "outputId": "9b4c3be0-109b-4d78-f686-1a3eba8cc22a"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "could not convert string to float: ''",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-0fbf48fd3fd9>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mblood_type_columns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'O+'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'A+'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'B+'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'AB+'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'O-'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'A-'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'B-'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'AB-'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcolumn\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mblood_type_columns\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m     \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'%'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# Standardize country names (remove leading spaces and special characters)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   6641\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6642\u001b[0m             \u001b[0;31m# else, only a single dtype is given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6643\u001b[0;31m             \u001b[0mnew_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6644\u001b[0m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor_from_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6645\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    428\u001b[0m             \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 430\u001b[0;31m         return self.apply(\n\u001b[0m\u001b[1;32m    431\u001b[0m             \u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m             \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, **kwargs)\u001b[0m\n\u001b[1;32m    361\u001b[0m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    362\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 363\u001b[0;31m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    364\u001b[0m             \u001b[0mresult_blocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextend_blocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapplied\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_blocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    365\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors, using_cow, squeeze)\u001b[0m\n\u001b[1;32m    756\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# type: ignore[call-overload]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    757\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 758\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array_safe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    759\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    760\u001b[0m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_coerce_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/dtypes/astype.py\u001b[0m in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    235\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 237\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    238\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mValueError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    239\u001b[0m         \u001b[0;31m# e.g. _astype_nansafe can fail on object-dtype of strings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/dtypes/astype.py\u001b[0m in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    180\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 182\u001b[0;31m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_astype_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m     \u001b[0;31m# in pandas we don't store numpy str dtypes, so convert to object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/dtypes/astype.py\u001b[0m in \u001b[0;36m_astype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m    131\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mobject\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m         \u001b[0;31m# Explicit copy, or required since NumPy can't view from / to object.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 133\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: could not convert string to float: ''"
          ]
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "The previous code block failed due to empty strings in the blood type columns. We need to handle these empty strings before converting them to float.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "jxsZ4NFA2CFf"
      }
    },
    {
      "source": [
        "# Handle missing values\n",
        "for column in df.columns:\n",
        "    if df[column].isnull().any():\n",
        "        if pd.api.types.is_numeric_dtype(df[column]):\n",
        "            df[column] = df[column].str.replace(',', '').str.replace('%', '').astype(float).fillna(df[column].mean())\n",
        "        else:\n",
        "            df[column] = df[column].fillna(df[column].mode()[0])\n",
        "\n",
        "# Ensure data consistency for blood type columns\n",
        "blood_type_columns = ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-']\n",
        "for column in blood_type_columns:\n",
        "    df[column] = df[column].str.replace('%', '').str.replace('', '0').astype(float)\n",
        "\n",
        "# Standardize country names (remove leading spaces and special characters)\n",
        "df['Country/Dependency'] = df['Country/Dependency'].str.strip()\n",
        "df['Country/Dependency'] = df['Country/Dependency'].str.replace('[\\[\\]\\d]', '', regex=True)\n",
        "\n",
        "# Remove duplicate rows\n",
        "df = df.drop_duplicates()\n",
        "\n",
        "# Print the updated DataFrame\n",
        "print(df.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "IxtmCtlK2CVM",
        "outputId": "91eb10de-9646-4208-8005-fb15e602df25"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "Can only use .str accessor with string values!",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-b3076066083c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mblood_type_columns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'O+'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'A+'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'B+'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'AB+'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'O-'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'A-'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'B-'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'AB-'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcolumn\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mblood_type_columns\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m     \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'%'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'0'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# Standardize country names (remove leading spaces and special characters)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   6297\u001b[0m         ):\n\u001b[1;32m   6298\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6299\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6300\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6301\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mfinal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/accessor.py\u001b[0m in \u001b[0;36m__get__\u001b[0;34m(self, obj, cls)\u001b[0m\n\u001b[1;32m    222\u001b[0m             \u001b[0;31m# we're accessing the attribute of the class, i.e., Dataset.geo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_accessor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 224\u001b[0;31m         \u001b[0maccessor_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_accessor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    225\u001b[0m         \u001b[0;31m# Replace the property with the accessor object. Inspired by:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    226\u001b[0m         \u001b[0;31m# https://www.pydanny.com/cached-property.html\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/strings/accessor.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    189\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstring_\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mStringDtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 191\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inferred_dtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    192\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_categorical\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCategoricalDtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_string\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mStringDtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/strings/accessor.py\u001b[0m in \u001b[0;36m_validate\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    243\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    244\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minferred_dtype\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mallowed_types\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 245\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Can only use .str accessor with string values!\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    246\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minferred_dtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: Can only use .str accessor with string values!"
          ]
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "The previous code block failed because we tried to use `.str` accessor on non-string columns. We need to iterate through the dataframe and only apply string operations to string columns.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "huieBnl62D05"
      }
    },
    {
      "source": [
        "# Handle missing values\n",
        "for column in df.columns:\n",
        "    if df[column].isnull().any():\n",
        "        if pd.api.types.is_numeric_dtype(df[column]):\n",
        "            df[column] = pd.to_numeric(df[column].str.replace(',', '').str.replace('%', ''), errors='coerce').fillna(df[column].mean())\n",
        "        else:\n",
        "            df[column] = df[column].fillna(df[column].mode()[0])\n",
        "\n",
        "# Ensure data consistency for blood type columns\n",
        "blood_type_columns = ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-']\n",
        "for column in blood_type_columns:\n",
        "    if pd.api.types.is_string_dtype(df[column]):\n",
        "        df[column] = pd.to_numeric(df[column].str.replace('%', ''), errors='coerce').fillna(0)\n",
        "    else:\n",
        "        df[column] = df[column].fillna(0)\n",
        "\n",
        "\n",
        "# Standardize country names (remove leading spaces and special characters)\n",
        "df['Country/Dependency'] = df['Country/Dependency'].str.strip()\n",
        "df['Country/Dependency'] = df['Country/Dependency'].str.replace('[\\[\\]\\d]', '', regex=True)\n",
        "\n",
        "# Remove duplicate rows\n",
        "df = df.drop_duplicates()\n",
        "\n",
        "# Print the updated DataFrame\n",
        "print(df.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9ec4mPqw2EEo",
        "outputId": "cdf36a8a-f143-4fe9-a0e3-85608b71e4ab"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Country/Dependency  Population     O+     A+    B+   AB+    O-    A-    B-  \\\n",
            "0            Albania   3,074,579  34.10  31.20  14.5  5.20  6.00  5.50  2.60   \n",
            "1            Algeria  43,576,691  40.00  30.00  15.0  4.25  6.60  2.30  1.10   \n",
            "2          Argentina  45,479,118  50.34  31.09   8.2  2.16  4.29  2.98  0.74   \n",
            "3            Armenia   3,021,324  29.00  46.30  12.0  5.60  2.00  3.70  1.00   \n",
            "4          Australia  25,466,459  38.00  32.00  12.0  4.00  7.00  6.00  2.00   \n",
            "\n",
            "    AB-  \n",
            "0  0.90  \n",
            "1  0.75  \n",
            "2  0.20  \n",
            "3  0.40  \n",
            "4  1.00  \n"
          ]
        }
      ]
    },
    {
      "source": [
        "## Data wrangling\n",
        "\n",
        "### Subtask:\n",
        "Wrangle the data in the `df` DataFrame to prepare it for feature engineering and model training.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "YPaJ5Ksu2G5n"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Convert the 'Population' column to numerical values, calculate the estimated blood type counts for each country, and handle any missing values in these counts.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "zojEpB4h2HtS"
      }
    },
    {
      "source": [
        "# Convert 'Population' to numerical values\n",
        "df['Population'] = pd.to_numeric(df['Population'].str.replace(',', ''), errors='coerce')\n",
        "\n",
        "# Calculate estimated blood type counts\n",
        "blood_type_columns = ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-']\n",
        "for blood_type in blood_type_columns:\n",
        "    df[f'{blood_type}_Estimated_Count'] = (df['Population'] * df[blood_type] / 100).fillna(0)\n",
        "\n",
        "display(df.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "id": "XNVgiV5d2H9C",
        "outputId": "c6416734-9201-465f-d53f-4d4dbe8cd69a"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  Country/Dependency  Population     O+     A+    B+   AB+    O-    A-    B-  \\\n",
              "0            Albania     3074579  34.10  31.20  14.5  5.20  6.00  5.50  2.60   \n",
              "1            Algeria    43576691  40.00  30.00  15.0  4.25  6.60  2.30  1.10   \n",
              "2          Argentina    45479118  50.34  31.09   8.2  2.16  4.29  2.98  0.74   \n",
              "3            Armenia     3021324  29.00  46.30  12.0  5.60  2.00  3.70  1.00   \n",
              "4          Australia    25466459  38.00  32.00  12.0  4.00  7.00  6.00  2.00   \n",
              "\n",
              "    AB-  O+_Estimated_Count  A+_Estimated_Count  B+_Estimated_Count  \\\n",
              "0  0.90        1.048431e+06        9.592686e+05          445813.955   \n",
              "1  0.75        1.743068e+07        1.307301e+07         6536503.650   \n",
              "2  0.20        2.289419e+07        1.413946e+07         3729287.676   \n",
              "3  0.40        8.761840e+05        1.398873e+06          362558.880   \n",
              "4  1.00        9.677254e+06        8.149267e+06         3055975.080   \n",
              "\n",
              "   AB+_Estimated_Count  O-_Estimated_Count  A-_Estimated_Count  \\\n",
              "0         1.598781e+05        1.844747e+05        1.691018e+05   \n",
              "1         1.852009e+06        2.876062e+06        1.002264e+06   \n",
              "2         9.823489e+05        1.951054e+06        1.355278e+06   \n",
              "3         1.691941e+05        6.042648e+04        1.117890e+05   \n",
              "4         1.018658e+06        1.782652e+06        1.527988e+06   \n",
              "\n",
              "   B-_Estimated_Count  AB-_Estimated_Count  \n",
              "0          79939.0540           27671.2110  \n",
              "1         479343.6010          326825.1825  \n",
              "2         336545.4732           90958.2360  \n",
              "3          30213.2400           12085.2960  \n",
              "4         509329.1800          254664.5900  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-16485afb-a3cc-4573-82d7-56c756c350ec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country/Dependency</th>\n",
              "      <th>Population</th>\n",
              "      <th>O+</th>\n",
              "      <th>A+</th>\n",
              "      <th>B+</th>\n",
              "      <th>AB+</th>\n",
              "      <th>O-</th>\n",
              "      <th>A-</th>\n",
              "      <th>B-</th>\n",
              "      <th>AB-</th>\n",
              "      <th>O+_Estimated_Count</th>\n",
              "      <th>A+_Estimated_Count</th>\n",
              "      <th>B+_Estimated_Count</th>\n",
              "      <th>AB+_Estimated_Count</th>\n",
              "      <th>O-_Estimated_Count</th>\n",
              "      <th>A-_Estimated_Count</th>\n",
              "      <th>B-_Estimated_Count</th>\n",
              "      <th>AB-_Estimated_Count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Albania</td>\n",
              "      <td>3074579</td>\n",
              "      <td>34.10</td>\n",
              "      <td>31.20</td>\n",
              "      <td>14.5</td>\n",
              "      <td>5.20</td>\n",
              "      <td>6.00</td>\n",
              "      <td>5.50</td>\n",
              "      <td>2.60</td>\n",
              "      <td>0.90</td>\n",
              "      <td>1.048431e+06</td>\n",
              "      <td>9.592686e+05</td>\n",
              "      <td>445813.955</td>\n",
              "      <td>1.598781e+05</td>\n",
              "      <td>1.844747e+05</td>\n",
              "      <td>1.691018e+05</td>\n",
              "      <td>79939.0540</td>\n",
              "      <td>27671.2110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>43576691</td>\n",
              "      <td>40.00</td>\n",
              "      <td>30.00</td>\n",
              "      <td>15.0</td>\n",
              "      <td>4.25</td>\n",
              "      <td>6.60</td>\n",
              "      <td>2.30</td>\n",
              "      <td>1.10</td>\n",
              "      <td>0.75</td>\n",
              "      <td>1.743068e+07</td>\n",
              "      <td>1.307301e+07</td>\n",
              "      <td>6536503.650</td>\n",
              "      <td>1.852009e+06</td>\n",
              "      <td>2.876062e+06</td>\n",
              "      <td>1.002264e+06</td>\n",
              "      <td>479343.6010</td>\n",
              "      <td>326825.1825</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>45479118</td>\n",
              "      <td>50.34</td>\n",
              "      <td>31.09</td>\n",
              "      <td>8.2</td>\n",
              "      <td>2.16</td>\n",
              "      <td>4.29</td>\n",
              "      <td>2.98</td>\n",
              "      <td>0.74</td>\n",
              "      <td>0.20</td>\n",
              "      <td>2.289419e+07</td>\n",
              "      <td>1.413946e+07</td>\n",
              "      <td>3729287.676</td>\n",
              "      <td>9.823489e+05</td>\n",
              "      <td>1.951054e+06</td>\n",
              "      <td>1.355278e+06</td>\n",
              "      <td>336545.4732</td>\n",
              "      <td>90958.2360</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Armenia</td>\n",
              "      <td>3021324</td>\n",
              "      <td>29.00</td>\n",
              "      <td>46.30</td>\n",
              "      <td>12.0</td>\n",
              "      <td>5.60</td>\n",
              "      <td>2.00</td>\n",
              "      <td>3.70</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.40</td>\n",
              "      <td>8.761840e+05</td>\n",
              "      <td>1.398873e+06</td>\n",
              "      <td>362558.880</td>\n",
              "      <td>1.691941e+05</td>\n",
              "      <td>6.042648e+04</td>\n",
              "      <td>1.117890e+05</td>\n",
              "      <td>30213.2400</td>\n",
              "      <td>12085.2960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Australia</td>\n",
              "      <td>25466459</td>\n",
              "      <td>38.00</td>\n",
              "      <td>32.00</td>\n",
              "      <td>12.0</td>\n",
              "      <td>4.00</td>\n",
              "      <td>7.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>9.677254e+06</td>\n",
              "      <td>8.149267e+06</td>\n",
              "      <td>3055975.080</td>\n",
              "      <td>1.018658e+06</td>\n",
              "      <td>1.782652e+06</td>\n",
              "      <td>1.527988e+06</td>\n",
              "      <td>509329.1800</td>\n",
              "      <td>254664.5900</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16485afb-a3cc-4573-82d7-56c756c350ec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-16485afb-a3cc-4573-82d7-56c756c350ec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-16485afb-a3cc-4573-82d7-56c756c350ec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a53682b8-d134-4caa-a55e-24a5d11b91bd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a53682b8-d134-4caa-a55e-24a5d11b91bd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a53682b8-d134-4caa-a55e-24a5d11b91bd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Country/Dependency\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Algeria\",\n          \"Australia\",\n          \"Argentina\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20764461,\n        \"min\": 3021324,\n        \"max\": 45479118,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          43576691,\n          25466459,\n          45479118\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O+\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.938370109789542,\n        \"min\": 29.0,\n        \"max\": 50.34,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          40.0,\n          38.0,\n          50.34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A+\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.84705192035229,\n        \"min\": 30.0,\n        \"max\": 46.3,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          30.0,\n          32.0,\n          31.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B+\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.6977768625295906,\n        \"min\": 8.2,\n        \"max\": 15.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15.0,\n          12.0,\n          14.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB+\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.337467756620697,\n        \"min\": 2.16,\n        \"max\": 5.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4.25,\n          4.0,\n          2.16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O-\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.055825868112375,\n        \"min\": 2.0,\n        \"max\": 7.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.6,\n          7.0,\n          4.29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A-\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5987745306953074,\n        \"min\": 2.3,\n        \"max\": 6.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.3,\n          6.0,\n          2.98\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B-\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7821253096531272,\n        \"min\": 0.74,\n        \"max\": 2.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.1,\n          2.0,\n          0.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB-\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3391164991562634,\n        \"min\": 0.2,\n        \"max\": 1.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.75,\n          1.0,\n          0.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O+_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9800654.80674893,\n        \"min\": 876183.96,\n        \"max\": 22894188.001200005,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          17430676.4,\n          9677254.42,\n          22894188.001200005\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A+_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6236136.740853428,\n        \"min\": 959268.6479999999,\n        \"max\": 14139457.786199998,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          13073007.3,\n          8149266.88,\n          14139457.786199998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B+_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2567609.893283041,\n        \"min\": 362558.88,\n        \"max\": 6536503.65,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6536503.65,\n          3055975.08,\n          3729287.6759999995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB+_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 705128.9094651006,\n        \"min\": 159878.108,\n        \"max\": 1852009.3675,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1852009.3675,\n          1018658.36,\n          982348.9488000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O-_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1214143.3057017077,\n        \"min\": 60426.48,\n        \"max\": 2876061.6059999997,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2876061.6059999997,\n          1782652.13,\n          1951054.1622\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A-_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 660556.1369121535,\n        \"min\": 111788.98800000001,\n        \"max\": 1527987.54,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1002263.8929999999,\n          1527987.54,\n          1355277.7163999998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B-_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 222314.37596804794,\n        \"min\": 30213.24,\n        \"max\": 509329.18,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          479343.601,\n          509329.18,\n          336545.4732\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB-_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 140896.10527810402,\n        \"min\": 12085.296,\n        \"max\": 326825.1825,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          326825.1825,\n          254664.59,\n          90958.23599999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Handle missing values in the newly created estimated blood type count columns.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "J-NY_QXu2JZW"
      }
    },
    {
      "source": [
        "# Handle missing values in estimated blood type counts\n",
        "for column in df.columns:\n",
        "  if 'Estimated_Count' in column:\n",
        "    df[column] = df[column].fillna(0)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "nUHQ0dUh2JpF"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "source": [
        "## Feature engineering\n",
        "\n",
        "### Subtask:\n",
        "Engineer new features from the existing data in `df` to improve the model's ability to predict blood demand.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "1YInJAu62MfN"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Utilize an external library (pycountry_convert) to map countries to their continents and create a new 'Continent/Region' column.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "gjhdX4Wy2NSz"
      }
    },
    {
      "source": [
        "try:\n",
        "    import pycountry_convert as pc\n",
        "except ImportError:\n",
        "    print(\"pycountry_convert is not installed. Please install it using 'pip install pycountry_convert'.\")\n",
        "\n",
        "def country_to_continent(country_name):\n",
        "    try:\n",
        "        country_alpha2 = pc.country_name_to_country_alpha2(country_name)\n",
        "        country_continent_code = pc.country_alpha2_to_continent_code(country_alpha2)\n",
        "        country_continent_name = pc.convert_continent_code_to_continent_name(country_continent_code)\n",
        "        return country_continent_name\n",
        "    except:\n",
        "        return \"Unknown\"\n",
        "\n",
        "\n",
        "df['Continent/Region'] = df['Country/Dependency'].apply(country_to_continent)\n",
        "\n",
        "display(df.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "lx7YM7HI2Nii",
        "outputId": "72ac8887-c906-4dfe-8f6d-d6ae1650e6bb"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pycountry_convert is not installed. Please install it using 'pip install pycountry_convert'.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  Country/Dependency  Population     O+     A+    B+   AB+    O-    A-    B-  \\\n",
              "0            Albania     3074579  34.10  31.20  14.5  5.20  6.00  5.50  2.60   \n",
              "1            Algeria    43576691  40.00  30.00  15.0  4.25  6.60  2.30  1.10   \n",
              "2          Argentina    45479118  50.34  31.09   8.2  2.16  4.29  2.98  0.74   \n",
              "3            Armenia     3021324  29.00  46.30  12.0  5.60  2.00  3.70  1.00   \n",
              "4          Australia    25466459  38.00  32.00  12.0  4.00  7.00  6.00  2.00   \n",
              "\n",
              "    AB-  O+_Estimated_Count  A+_Estimated_Count  B+_Estimated_Count  \\\n",
              "0  0.90        1.048431e+06        9.592686e+05          445813.955   \n",
              "1  0.75        1.743068e+07        1.307301e+07         6536503.650   \n",
              "2  0.20        2.289419e+07        1.413946e+07         3729287.676   \n",
              "3  0.40        8.761840e+05        1.398873e+06          362558.880   \n",
              "4  1.00        9.677254e+06        8.149267e+06         3055975.080   \n",
              "\n",
              "   AB+_Estimated_Count  O-_Estimated_Count  A-_Estimated_Count  \\\n",
              "0         1.598781e+05        1.844747e+05        1.691018e+05   \n",
              "1         1.852009e+06        2.876062e+06        1.002264e+06   \n",
              "2         9.823489e+05        1.951054e+06        1.355278e+06   \n",
              "3         1.691941e+05        6.042648e+04        1.117890e+05   \n",
              "4         1.018658e+06        1.782652e+06        1.527988e+06   \n",
              "\n",
              "   B-_Estimated_Count  AB-_Estimated_Count Continent/Region  \n",
              "0          79939.0540           27671.2110          Unknown  \n",
              "1         479343.6010          326825.1825          Unknown  \n",
              "2         336545.4732           90958.2360          Unknown  \n",
              "3          30213.2400           12085.2960          Unknown  \n",
              "4         509329.1800          254664.5900          Unknown  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c358cf52-e017-44e7-8c8c-ac72757e95e3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country/Dependency</th>\n",
              "      <th>Population</th>\n",
              "      <th>O+</th>\n",
              "      <th>A+</th>\n",
              "      <th>B+</th>\n",
              "      <th>AB+</th>\n",
              "      <th>O-</th>\n",
              "      <th>A-</th>\n",
              "      <th>B-</th>\n",
              "      <th>AB-</th>\n",
              "      <th>O+_Estimated_Count</th>\n",
              "      <th>A+_Estimated_Count</th>\n",
              "      <th>B+_Estimated_Count</th>\n",
              "      <th>AB+_Estimated_Count</th>\n",
              "      <th>O-_Estimated_Count</th>\n",
              "      <th>A-_Estimated_Count</th>\n",
              "      <th>B-_Estimated_Count</th>\n",
              "      <th>AB-_Estimated_Count</th>\n",
              "      <th>Continent/Region</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Albania</td>\n",
              "      <td>3074579</td>\n",
              "      <td>34.10</td>\n",
              "      <td>31.20</td>\n",
              "      <td>14.5</td>\n",
              "      <td>5.20</td>\n",
              "      <td>6.00</td>\n",
              "      <td>5.50</td>\n",
              "      <td>2.60</td>\n",
              "      <td>0.90</td>\n",
              "      <td>1.048431e+06</td>\n",
              "      <td>9.592686e+05</td>\n",
              "      <td>445813.955</td>\n",
              "      <td>1.598781e+05</td>\n",
              "      <td>1.844747e+05</td>\n",
              "      <td>1.691018e+05</td>\n",
              "      <td>79939.0540</td>\n",
              "      <td>27671.2110</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>43576691</td>\n",
              "      <td>40.00</td>\n",
              "      <td>30.00</td>\n",
              "      <td>15.0</td>\n",
              "      <td>4.25</td>\n",
              "      <td>6.60</td>\n",
              "      <td>2.30</td>\n",
              "      <td>1.10</td>\n",
              "      <td>0.75</td>\n",
              "      <td>1.743068e+07</td>\n",
              "      <td>1.307301e+07</td>\n",
              "      <td>6536503.650</td>\n",
              "      <td>1.852009e+06</td>\n",
              "      <td>2.876062e+06</td>\n",
              "      <td>1.002264e+06</td>\n",
              "      <td>479343.6010</td>\n",
              "      <td>326825.1825</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>45479118</td>\n",
              "      <td>50.34</td>\n",
              "      <td>31.09</td>\n",
              "      <td>8.2</td>\n",
              "      <td>2.16</td>\n",
              "      <td>4.29</td>\n",
              "      <td>2.98</td>\n",
              "      <td>0.74</td>\n",
              "      <td>0.20</td>\n",
              "      <td>2.289419e+07</td>\n",
              "      <td>1.413946e+07</td>\n",
              "      <td>3729287.676</td>\n",
              "      <td>9.823489e+05</td>\n",
              "      <td>1.951054e+06</td>\n",
              "      <td>1.355278e+06</td>\n",
              "      <td>336545.4732</td>\n",
              "      <td>90958.2360</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Armenia</td>\n",
              "      <td>3021324</td>\n",
              "      <td>29.00</td>\n",
              "      <td>46.30</td>\n",
              "      <td>12.0</td>\n",
              "      <td>5.60</td>\n",
              "      <td>2.00</td>\n",
              "      <td>3.70</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.40</td>\n",
              "      <td>8.761840e+05</td>\n",
              "      <td>1.398873e+06</td>\n",
              "      <td>362558.880</td>\n",
              "      <td>1.691941e+05</td>\n",
              "      <td>6.042648e+04</td>\n",
              "      <td>1.117890e+05</td>\n",
              "      <td>30213.2400</td>\n",
              "      <td>12085.2960</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Australia</td>\n",
              "      <td>25466459</td>\n",
              "      <td>38.00</td>\n",
              "      <td>32.00</td>\n",
              "      <td>12.0</td>\n",
              "      <td>4.00</td>\n",
              "      <td>7.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>9.677254e+06</td>\n",
              "      <td>8.149267e+06</td>\n",
              "      <td>3055975.080</td>\n",
              "      <td>1.018658e+06</td>\n",
              "      <td>1.782652e+06</td>\n",
              "      <td>1.527988e+06</td>\n",
              "      <td>509329.1800</td>\n",
              "      <td>254664.5900</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c358cf52-e017-44e7-8c8c-ac72757e95e3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c358cf52-e017-44e7-8c8c-ac72757e95e3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c358cf52-e017-44e7-8c8c-ac72757e95e3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d737056e-4924-4907-99ca-365d1e0615bf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d737056e-4924-4907-99ca-365d1e0615bf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d737056e-4924-4907-99ca-365d1e0615bf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Country/Dependency\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Algeria\",\n          \"Australia\",\n          \"Argentina\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20764461,\n        \"min\": 3021324,\n        \"max\": 45479118,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          43576691,\n          25466459,\n          45479118\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O+\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.938370109789542,\n        \"min\": 29.0,\n        \"max\": 50.34,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          40.0,\n          38.0,\n          50.34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A+\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.84705192035229,\n        \"min\": 30.0,\n        \"max\": 46.3,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          30.0,\n          32.0,\n          31.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B+\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.6977768625295906,\n        \"min\": 8.2,\n        \"max\": 15.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15.0,\n          12.0,\n          14.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB+\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.337467756620697,\n        \"min\": 2.16,\n        \"max\": 5.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4.25,\n          4.0,\n          2.16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O-\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.055825868112375,\n        \"min\": 2.0,\n        \"max\": 7.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.6,\n          7.0,\n          4.29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A-\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5987745306953074,\n        \"min\": 2.3,\n        \"max\": 6.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.3,\n          6.0,\n          2.98\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B-\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7821253096531272,\n        \"min\": 0.74,\n        \"max\": 2.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.1,\n          2.0,\n          0.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB-\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3391164991562634,\n        \"min\": 0.2,\n        \"max\": 1.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.75,\n          1.0,\n          0.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O+_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9800654.80674893,\n        \"min\": 876183.96,\n        \"max\": 22894188.001200005,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          17430676.4,\n          9677254.42,\n          22894188.001200005\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A+_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6236136.740853428,\n        \"min\": 959268.6479999999,\n        \"max\": 14139457.786199998,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          13073007.3,\n          8149266.88,\n          14139457.786199998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B+_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2567609.893283041,\n        \"min\": 362558.88,\n        \"max\": 6536503.65,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6536503.65,\n          3055975.08,\n          3729287.6759999995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB+_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 705128.9094651006,\n        \"min\": 159878.108,\n        \"max\": 1852009.3675,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1852009.3675,\n          1018658.36,\n          982348.9488000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O-_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1214143.3057017077,\n        \"min\": 60426.48,\n        \"max\": 2876061.6059999997,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2876061.6059999997,\n          1782652.13,\n          1951054.1622\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A-_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 660556.1369121535,\n        \"min\": 111788.98800000001,\n        \"max\": 1527987.54,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1002263.8929999999,\n          1527987.54,\n          1355277.7163999998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B-_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 222314.37596804794,\n        \"min\": 30213.24,\n        \"max\": 509329.18,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          479343.601,\n          509329.18,\n          336545.4732\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB-_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 140896.10527810402,\n        \"min\": 12085.296,\n        \"max\": 326825.1825,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          326825.1825,\n          254664.59,\n          90958.23599999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Continent/Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Calculate the proportion of each blood type within each country and create new columns for these proportions.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "riN0B_8_2PCd"
      }
    },
    {
      "source": [
        "blood_type_columns = ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-']\n",
        "for blood_type in blood_type_columns:\n",
        "    df[f'{blood_type}_Proportion'] = df[blood_type] / 100\n",
        "\n",
        "display(df.head())"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "fbjYXlLX2PSP",
        "outputId": "6fa5cfa7-92d8-4b9e-ab82-e16eb6904581"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  Country/Dependency  Population     O+     A+    B+   AB+    O-    A-    B-  \\\n",
              "0            Albania     3074579  34.10  31.20  14.5  5.20  6.00  5.50  2.60   \n",
              "1            Algeria    43576691  40.00  30.00  15.0  4.25  6.60  2.30  1.10   \n",
              "2          Argentina    45479118  50.34  31.09   8.2  2.16  4.29  2.98  0.74   \n",
              "3            Armenia     3021324  29.00  46.30  12.0  5.60  2.00  3.70  1.00   \n",
              "4          Australia    25466459  38.00  32.00  12.0  4.00  7.00  6.00  2.00   \n",
              "\n",
              "    AB-  ...  AB-_Estimated_Count  Continent/Region  O+_Proportion  \\\n",
              "0  0.90  ...           27671.2110           Unknown         0.3410   \n",
              "1  0.75  ...          326825.1825           Unknown         0.4000   \n",
              "2  0.20  ...           90958.2360           Unknown         0.5034   \n",
              "3  0.40  ...           12085.2960           Unknown         0.2900   \n",
              "4  1.00  ...          254664.5900           Unknown         0.3800   \n",
              "\n",
              "   A+_Proportion  B+_Proportion  AB+_Proportion  O-_Proportion  A-_Proportion  \\\n",
              "0         0.3120          0.145          0.0520         0.0600         0.0550   \n",
              "1         0.3000          0.150          0.0425         0.0660         0.0230   \n",
              "2         0.3109          0.082          0.0216         0.0429         0.0298   \n",
              "3         0.4630          0.120          0.0560         0.0200         0.0370   \n",
              "4         0.3200          0.120          0.0400         0.0700         0.0600   \n",
              "\n",
              "  B-_Proportion  AB-_Proportion  \n",
              "0        0.0260          0.0090  \n",
              "1        0.0110          0.0075  \n",
              "2        0.0074          0.0020  \n",
              "3        0.0100          0.0040  \n",
              "4        0.0200          0.0100  \n",
              "\n",
              "[5 rows x 27 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9a1fe45-3a0a-4cbc-a1de-bb5b1c274a81\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country/Dependency</th>\n",
              "      <th>Population</th>\n",
              "      <th>O+</th>\n",
              "      <th>A+</th>\n",
              "      <th>B+</th>\n",
              "      <th>AB+</th>\n",
              "      <th>O-</th>\n",
              "      <th>A-</th>\n",
              "      <th>B-</th>\n",
              "      <th>AB-</th>\n",
              "      <th>...</th>\n",
              "      <th>AB-_Estimated_Count</th>\n",
              "      <th>Continent/Region</th>\n",
              "      <th>O+_Proportion</th>\n",
              "      <th>A+_Proportion</th>\n",
              "      <th>B+_Proportion</th>\n",
              "      <th>AB+_Proportion</th>\n",
              "      <th>O-_Proportion</th>\n",
              "      <th>A-_Proportion</th>\n",
              "      <th>B-_Proportion</th>\n",
              "      <th>AB-_Proportion</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Albania</td>\n",
              "      <td>3074579</td>\n",
              "      <td>34.10</td>\n",
              "      <td>31.20</td>\n",
              "      <td>14.5</td>\n",
              "      <td>5.20</td>\n",
              "      <td>6.00</td>\n",
              "      <td>5.50</td>\n",
              "      <td>2.60</td>\n",
              "      <td>0.90</td>\n",
              "      <td>...</td>\n",
              "      <td>27671.2110</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0.3410</td>\n",
              "      <td>0.3120</td>\n",
              "      <td>0.145</td>\n",
              "      <td>0.0520</td>\n",
              "      <td>0.0600</td>\n",
              "      <td>0.0550</td>\n",
              "      <td>0.0260</td>\n",
              "      <td>0.0090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>43576691</td>\n",
              "      <td>40.00</td>\n",
              "      <td>30.00</td>\n",
              "      <td>15.0</td>\n",
              "      <td>4.25</td>\n",
              "      <td>6.60</td>\n",
              "      <td>2.30</td>\n",
              "      <td>1.10</td>\n",
              "      <td>0.75</td>\n",
              "      <td>...</td>\n",
              "      <td>326825.1825</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.3000</td>\n",
              "      <td>0.150</td>\n",
              "      <td>0.0425</td>\n",
              "      <td>0.0660</td>\n",
              "      <td>0.0230</td>\n",
              "      <td>0.0110</td>\n",
              "      <td>0.0075</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>45479118</td>\n",
              "      <td>50.34</td>\n",
              "      <td>31.09</td>\n",
              "      <td>8.2</td>\n",
              "      <td>2.16</td>\n",
              "      <td>4.29</td>\n",
              "      <td>2.98</td>\n",
              "      <td>0.74</td>\n",
              "      <td>0.20</td>\n",
              "      <td>...</td>\n",
              "      <td>90958.2360</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0.5034</td>\n",
              "      <td>0.3109</td>\n",
              "      <td>0.082</td>\n",
              "      <td>0.0216</td>\n",
              "      <td>0.0429</td>\n",
              "      <td>0.0298</td>\n",
              "      <td>0.0074</td>\n",
              "      <td>0.0020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Armenia</td>\n",
              "      <td>3021324</td>\n",
              "      <td>29.00</td>\n",
              "      <td>46.30</td>\n",
              "      <td>12.0</td>\n",
              "      <td>5.60</td>\n",
              "      <td>2.00</td>\n",
              "      <td>3.70</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.40</td>\n",
              "      <td>...</td>\n",
              "      <td>12085.2960</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0.2900</td>\n",
              "      <td>0.4630</td>\n",
              "      <td>0.120</td>\n",
              "      <td>0.0560</td>\n",
              "      <td>0.0200</td>\n",
              "      <td>0.0370</td>\n",
              "      <td>0.0100</td>\n",
              "      <td>0.0040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Australia</td>\n",
              "      <td>25466459</td>\n",
              "      <td>38.00</td>\n",
              "      <td>32.00</td>\n",
              "      <td>12.0</td>\n",
              "      <td>4.00</td>\n",
              "      <td>7.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>...</td>\n",
              "      <td>254664.5900</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>0.3800</td>\n",
              "      <td>0.3200</td>\n",
              "      <td>0.120</td>\n",
              "      <td>0.0400</td>\n",
              "      <td>0.0700</td>\n",
              "      <td>0.0600</td>\n",
              "      <td>0.0200</td>\n",
              "      <td>0.0100</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9a1fe45-3a0a-4cbc-a1de-bb5b1c274a81')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a9a1fe45-3a0a-4cbc-a1de-bb5b1c274a81 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a9a1fe45-3a0a-4cbc-a1de-bb5b1c274a81');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a115d584-aa6b-48bd-a604-9481230e98e8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a115d584-aa6b-48bd-a604-9481230e98e8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a115d584-aa6b-48bd-a604-9481230e98e8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Analyze the blood type distribution across different continents/regions to identify any regional trends by calculating the average proportion of each blood type within each continent/region.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "gtka8ofr2QyT"
      }
    },
    {
      "source": [
        "regional_blood_type_proportions = df.groupby('Continent/Region')[['O+_Proportion', 'A+_Proportion', 'B+_Proportion', 'AB+_Proportion', 'O-_Proportion', 'A-_Proportion', 'B-_Proportion', 'AB-_Proportion']].mean()\n",
        "display(regional_blood_type_proportions)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 149
        },
        "id": "Az_yyN8v2RCN",
        "outputId": "b2d4a3ea-6051-4163-aba9-8c20eb0b48c7"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                  O+_Proportion  A+_Proportion  B+_Proportion  AB+_Proportion  \\\n",
              "Continent/Region                                                                \n",
              "Unknown                 0.40315       0.292429       0.161779        0.045759   \n",
              "\n",
              "                  O-_Proportion  A-_Proportion  B-_Proportion  AB-_Proportion  \n",
              "Continent/Region                                                               \n",
              "Unknown                 0.04301       0.034126       0.013675        0.004655  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6d6d32ce-e2c4-453e-a30c-639db4c7bda9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>O+_Proportion</th>\n",
              "      <th>A+_Proportion</th>\n",
              "      <th>B+_Proportion</th>\n",
              "      <th>AB+_Proportion</th>\n",
              "      <th>O-_Proportion</th>\n",
              "      <th>A-_Proportion</th>\n",
              "      <th>B-_Proportion</th>\n",
              "      <th>AB-_Proportion</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Continent/Region</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Unknown</th>\n",
              "      <td>0.40315</td>\n",
              "      <td>0.292429</td>\n",
              "      <td>0.161779</td>\n",
              "      <td>0.045759</td>\n",
              "      <td>0.04301</td>\n",
              "      <td>0.034126</td>\n",
              "      <td>0.013675</td>\n",
              "      <td>0.004655</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d6d32ce-e2c4-453e-a30c-639db4c7bda9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6d6d32ce-e2c4-453e-a30c-639db4c7bda9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6d6d32ce-e2c4-453e-a30c-639db4c7bda9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_8dd9492f-f9dc-4edb-991b-1acf0ba52a2d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('regional_blood_type_proportions')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8dd9492f-f9dc-4edb-991b-1acf0ba52a2d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('regional_blood_type_proportions');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "regional_blood_type_proportions",
              "summary": "{\n  \"name\": \"regional_blood_type_proportions\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Continent/Region\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O+_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.40315,\n        \"max\": 0.40315,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.40315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A+_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.29242936507936507,\n        \"max\": 0.29242936507936507,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.29242936507936507\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B+_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.16177857142857144,\n        \"max\": 0.16177857142857144,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.16177857142857144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB+_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.04575873015873016,\n        \"max\": 0.04575873015873016,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.04575873015873016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O-_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.04300952380952381,\n        \"max\": 0.04300952380952381,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.04300952380952381\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A-_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.03412619047619048,\n        \"max\": 0.03412619047619048,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.03412619047619048\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B-_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.013675396825396827,\n        \"max\": 0.013675396825396827,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.013675396825396827\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB-_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.004654761904761905,\n        \"max\": 0.004654761904761905,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.004654761904761905\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Create features related to the rarity or prevalence of certain blood types in different regions by calculating the standard deviation of blood type proportions within each region.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "NvskY5iw2SeR"
      }
    },
    {
      "source": [
        "regional_blood_type_std = df.groupby('Continent/Region')[['O+_Proportion', 'A+_Proportion', 'B+_Proportion', 'AB+_Proportion', 'O-_Proportion', 'A-_Proportion', 'B-_Proportion', 'AB-_Proportion']].std()\n",
        "display(regional_blood_type_std)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 149
        },
        "id": "3irnrZ0J2SuA",
        "outputId": "7f7f90cd-570b-44eb-cebd-b784fb7e3367"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                  O+_Proportion  A+_Proportion  B+_Proportion  AB+_Proportion  \\\n",
              "Continent/Region                                                                \n",
              "Unknown                0.099031       0.065259       0.075655        0.022975   \n",
              "\n",
              "                  O-_Proportion  A-_Proportion  B-_Proportion  AB-_Proportion  \n",
              "Continent/Region                                                               \n",
              "Unknown                0.029743       0.025496       0.008588         0.00379  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-673a30d1-a298-48a9-9c78-edc307df3e6f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>O+_Proportion</th>\n",
              "      <th>A+_Proportion</th>\n",
              "      <th>B+_Proportion</th>\n",
              "      <th>AB+_Proportion</th>\n",
              "      <th>O-_Proportion</th>\n",
              "      <th>A-_Proportion</th>\n",
              "      <th>B-_Proportion</th>\n",
              "      <th>AB-_Proportion</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Continent/Region</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Unknown</th>\n",
              "      <td>0.099031</td>\n",
              "      <td>0.065259</td>\n",
              "      <td>0.075655</td>\n",
              "      <td>0.022975</td>\n",
              "      <td>0.029743</td>\n",
              "      <td>0.025496</td>\n",
              "      <td>0.008588</td>\n",
              "      <td>0.00379</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-673a30d1-a298-48a9-9c78-edc307df3e6f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-673a30d1-a298-48a9-9c78-edc307df3e6f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-673a30d1-a298-48a9-9c78-edc307df3e6f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_04e08dec-a502-49d6-b2ba-14843fa0ce9f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('regional_blood_type_std')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_04e08dec-a502-49d6-b2ba-14843fa0ce9f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('regional_blood_type_std');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "regional_blood_type_std",
              "summary": "{\n  \"name\": \"regional_blood_type_std\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Continent/Region\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O+_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.09903147681419275,\n        \"max\": 0.09903147681419275,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.09903147681419275\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A+_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.06525914135807834,\n        \"max\": 0.06525914135807834,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.06525914135807834\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B+_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.07565480300115027,\n        \"max\": 0.07565480300115027,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.07565480300115027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB+_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.022975243266929804,\n        \"max\": 0.022975243266929804,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.022975243266929804\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O-_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.029742958638498435,\n        \"max\": 0.029742958638498435,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.029742958638498435\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A-_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.02549589826955365,\n        \"max\": 0.02549589826955365,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.02549589826955365\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B-_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.008588296096506558,\n        \"max\": 0.008588296096506558,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.008588296096506558\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AB-_Proportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.003789682987118731,\n        \"max\": 0.003789682987118731,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.003789682987118731\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "## Data exploration\n",
        "\n",
        "### Subtask:\n",
        "Explore the `df` DataFrame to gain insights into the blood type distribution across countries and continents.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "cqcHnw0l2VkB"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Calculate the mean and standard deviation of the blood type proportions for each blood type across all countries to analyze the distribution of different blood types.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "8rQmUwfm2WXz"
      }
    },
    {
      "source": [
        "blood_type_columns = ['O+_Proportion', 'A+_Proportion', 'B+_Proportion', 'AB+_Proportion', 'O-_Proportion', 'A-_Proportion', 'B-_Proportion', 'AB-_Proportion']\n",
        "mean_blood_type_proportions = df[blood_type_columns].mean()\n",
        "std_blood_type_proportions = df[blood_type_columns].std()\n",
        "\n",
        "print(\"Mean Blood Type Proportions:\")\n",
        "display(mean_blood_type_proportions)\n",
        "print(\"\\nStandard Deviation of Blood Type Proportions:\")\n",
        "display(std_blood_type_proportions)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 705
        },
        "id": "elknEaue2Wnc",
        "outputId": "434b3bd6-0c1c-447b-ead1-6bcdf0d928e5"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Blood Type Proportions:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "O+_Proportion     0.403150\n",
              "A+_Proportion     0.292429\n",
              "B+_Proportion     0.161779\n",
              "AB+_Proportion    0.045759\n",
              "O-_Proportion     0.043010\n",
              "A-_Proportion     0.034126\n",
              "B-_Proportion     0.013675\n",
              "AB-_Proportion    0.004655\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>O+_Proportion</th>\n",
              "      <td>0.403150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A+_Proportion</th>\n",
              "      <td>0.292429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B+_Proportion</th>\n",
              "      <td>0.161779</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AB+_Proportion</th>\n",
              "      <td>0.045759</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>O-_Proportion</th>\n",
              "      <td>0.043010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A-_Proportion</th>\n",
              "      <td>0.034126</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B-_Proportion</th>\n",
              "      <td>0.013675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AB-_Proportion</th>\n",
              "      <td>0.004655</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Standard Deviation of Blood Type Proportions:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "O+_Proportion     0.099031\n",
              "A+_Proportion     0.065259\n",
              "B+_Proportion     0.075655\n",
              "AB+_Proportion    0.022975\n",
              "O-_Proportion     0.029743\n",
              "A-_Proportion     0.025496\n",
              "B-_Proportion     0.008588\n",
              "AB-_Proportion    0.003790\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>O+_Proportion</th>\n",
              "      <td>0.099031</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A+_Proportion</th>\n",
              "      <td>0.065259</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B+_Proportion</th>\n",
              "      <td>0.075655</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AB+_Proportion</th>\n",
              "      <td>0.022975</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>O-_Proportion</th>\n",
              "      <td>0.029743</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A-_Proportion</th>\n",
              "      <td>0.025496</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B-_Proportion</th>\n",
              "      <td>0.008588</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AB-_Proportion</th>\n",
              "      <td>0.003790</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Examine the relationship between blood type distribution and population size by creating a scatter plot with population size on the x-axis and blood type proportion on the y-axis for each blood type.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "0-5962Pk2YIn"
      }
    },
    {
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "blood_type_columns = ['O+_Proportion', 'A+_Proportion', 'B+_Proportion', 'AB+_Proportion', 'O-_Proportion', 'A-_Proportion', 'B-_Proportion', 'AB-_Proportion']\n",
        "fig, axes = plt.subplots(2, 4, figsize=(20, 10))\n",
        "for i, blood_type in enumerate(blood_type_columns):\n",
        "  row = i // 4\n",
        "  col = i % 4\n",
        "  axes[row, col].scatter(df['Population'], df[blood_type])\n",
        "  axes[row, col].set_xlabel('Population')\n",
        "  axes[row, col].set_ylabel(blood_type)\n",
        "  axes[row, col].set_title(f'Population vs {blood_type}')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 427
        },
        "id": "yAP8s10c2YYU",
        "outputId": "675839ff-2d09-4a23-fc58-fb927aec32e6"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Explore the correlation between blood type distribution and the `Continent/Region` feature by calculating the average blood type proportions for each continent/region and creating a visualization to show the average blood type proportions for each continent/region.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "ojn83FIB2ajo"
      }
    },
    {
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "regional_blood_type_proportions = df.groupby('Continent/Region')[['O+_Proportion', 'A+_Proportion', 'B+_Proportion', 'AB+_Proportion', 'O-_Proportion', 'A-_Proportion', 'B-_Proportion', 'AB-_Proportion']].mean()\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(15, 8))\n",
        "regional_blood_type_proportions.plot(kind='bar', ax=ax)\n",
        "ax.set_xlabel('Continent/Region')\n",
        "ax.set_ylabel('Average Blood Type Proportion')\n",
        "ax.set_title('Average Blood Type Proportions by Continent/Region')\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 454
        },
        "id": "F3GiUt1i2azb",
        "outputId": "557578ac-2bd0-4c79-8903-a807458a1262"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Analyze the distribution of estimated blood type counts across different countries and continents by calculating the mean and standard deviation of the estimated blood type counts for each blood type, creating a histogram to show the distribution of estimated blood type counts for each blood type across all countries, and creating a box plot to compare the distribution of estimated blood type counts for each blood type across different continents/regions.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "EjAL5dIs2dD2"
      }
    },
    {
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "estimated_blood_type_counts = [col for col in df.columns if 'Estimated_Count' in col]\n",
        "\n",
        "# Calculate mean and standard deviation of estimated blood type counts\n",
        "mean_estimated_counts = df[estimated_blood_type_counts].mean()\n",
        "std_estimated_counts = df[estimated_blood_type_counts].std()\n",
        "\n",
        "print(\"Mean Estimated Blood Type Counts:\")\n",
        "display(mean_estimated_counts)\n",
        "print(\"\\nStandard Deviation of Estimated Blood Type Counts:\")\n",
        "display(std_estimated_counts)\n",
        "\n",
        "\n",
        "# Create histograms for the distribution of estimated blood type counts for each blood type across all countries\n",
        "fig, axes = plt.subplots(2, 4, figsize=(20, 10))\n",
        "for i, blood_type in enumerate(estimated_blood_type_counts):\n",
        "  row = i // 4\n",
        "  col = i % 4\n",
        "  axes[row, col].hist(df[blood_type])\n",
        "  axes[row, col].set_xlabel('Estimated Count')\n",
        "  axes[row, col].set_ylabel('Frequency')\n",
        "  axes[row, col].set_title(f'Distribution of {blood_type}')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Create box plots to compare the distribution of estimated blood type counts for each blood type across different continents/regions\n",
        "fig, axes = plt.subplots(2, 4, figsize=(20, 10))\n",
        "for i, blood_type in enumerate(estimated_blood_type_counts):\n",
        "  row = i // 4\n",
        "  col = i % 4\n",
        "  axes[row, col].boxplot([df[df['Continent/Region'] == region][blood_type] for region in df['Continent/Region'].unique() if region != 'Unknown'], labels=[region for region in df['Continent/Region'].unique() if region != 'Unknown'])\n",
        "  axes[row, col].set_xlabel('Continent/Region')\n",
        "  axes[row, col].set_ylabel('Estimated Count')\n",
        "  axes[row, col].set_title(f'Distribution of {blood_type} by Continent/Region')\n",
        "  plt.xticks(rotation=45, ha='right')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "mHvGPK8l2dTx",
        "outputId": "16787483-8d71-4fd7-977e-638cb1d67c67"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Estimated Blood Type Counts:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "O+_Estimated_Count     4.516162e+07\n",
              "A+_Estimated_Count     3.247576e+07\n",
              "B+_Estimated_Count     1.815341e+07\n",
              "AB+_Estimated_Count    4.735850e+06\n",
              "O-_Estimated_Count     1.041200e+07\n",
              "A-_Estimated_Count     6.173107e+06\n",
              "B-_Estimated_Count     1.903057e+06\n",
              "AB-_Estimated_Count    2.302976e+05\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>O+_Estimated_Count</th>\n",
              "      <td>4.516162e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A+_Estimated_Count</th>\n",
              "      <td>3.247576e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B+_Estimated_Count</th>\n",
              "      <td>1.815341e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AB+_Estimated_Count</th>\n",
              "      <td>4.735850e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>O-_Estimated_Count</th>\n",
              "      <td>1.041200e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A-_Estimated_Count</th>\n",
              "      <td>6.173107e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B-_Estimated_Count</th>\n",
              "      <td>1.903057e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AB-_Estimated_Count</th>\n",
              "      <td>2.302976e+05</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Standard Deviation of Estimated Blood Type Counts:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "O+_Estimated_Count     2.706076e+08\n",
              "A+_Estimated_Count     1.929284e+08\n",
              "B+_Estimated_Count     7.628681e+07\n",
              "AB+_Estimated_Count    1.952761e+07\n",
              "O-_Estimated_Count     9.757855e+07\n",
              "A-_Estimated_Count     5.604890e+07\n",
              "B-_Estimated_Count     1.402049e+07\n",
              "AB-_Estimated_Count    6.764114e+05\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>O+_Estimated_Count</th>\n",
              "      <td>2.706076e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A+_Estimated_Count</th>\n",
              "      <td>1.929284e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B+_Estimated_Count</th>\n",
              "      <td>7.628681e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AB+_Estimated_Count</th>\n",
              "      <td>1.952761e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>O-_Estimated_Count</th>\n",
              "      <td>9.757855e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A-_Estimated_Count</th>\n",
              "      <td>5.604890e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B-_Estimated_Count</th>\n",
              "      <td>1.402049e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AB-_Estimated_Count</th>\n",
              "      <td>6.764114e+05</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-40c7c149c6aa>:34: MatplotlibDeprecationWarning: The 'labels' parameter of boxplot() has been renamed 'tick_labels' since Matplotlib 3.9; support for the old name will be dropped in 3.11.\n",
            "  axes[row, col].boxplot([df[df['Continent/Region'] == region][blood_type] for region in df['Continent/Region'].unique() if region != 'Unknown'], labels=[region for region in df['Continent/Region'].unique() if region != 'Unknown'])\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Dimensions of labels and X must be compatible",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-15-40c7c149c6aa>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     32\u001b[0m   \u001b[0mrow\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m//\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m   \u001b[0mcol\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m   \u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mboxplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Continent/Region'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mregion\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mblood_type\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mregion\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Continent/Region'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mregion\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'Unknown'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mregion\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mregion\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Continent/Region'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mregion\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'Unknown'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m   \u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Continent/Region'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m   \u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Estimated Count'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/_api/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    451\u001b[0m                 \u001b[0;34m\"parameter will become keyword-only in %(removal)s.\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    452\u001b[0m                 name=name, obj_type=f\"parameter of {func.__name__}()\")\n\u001b[0;32m--> 453\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    454\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    455\u001b[0m     \u001b[0;31m# Don't modify *func*'s signature, as boilerplate.py needs it.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1519\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1520\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1521\u001b[0;31m             return func(\n\u001b[0m\u001b[1;32m   1522\u001b[0m                 \u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1523\u001b[0m                 \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/_api/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    293\u001b[0m                 f\"for the old name will be dropped in %(removal)s.\")\n\u001b[1;32m    294\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnew\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mold\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 295\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    296\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m     \u001b[0;31m# wrapper() must keep the same documented signature as func(): if we\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mboxplot\u001b[0;34m(self, x, notch, sym, vert, orientation, whis, positions, widths, patch_artist, bootstrap, usermedians, conf_intervals, meanline, showmeans, showcaps, showbox, showfliers, boxprops, tick_labels, flierprops, medianprops, meanprops, capprops, whiskerprops, manage_ticks, autorange, zorder, capwidths, label)\u001b[0m\n\u001b[1;32m   4108\u001b[0m             \u001b[0mbootstrap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmpl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrcParams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'boxplot.bootstrap'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4110\u001b[0;31m         bxpstats = cbook.boxplot_stats(x, whis=whis, bootstrap=bootstrap,\n\u001b[0m\u001b[1;32m   4111\u001b[0m                                        labels=tick_labels, autorange=autorange)\n\u001b[1;32m   4112\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnotch\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/matplotlib/cbook.py\u001b[0m in \u001b[0;36mboxplot_stats\u001b[0;34m(X, whis, bootstrap, labels, autorange)\u001b[0m\n\u001b[1;32m   1205\u001b[0m         \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mitertools\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrepeat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1206\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mncols\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1207\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Dimensions of labels and X must be compatible\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1208\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1209\u001b[0m     \u001b[0minput_whis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwhis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Dimensions of labels and X must be compatible"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 8 Axes>"
            ],
            "image/png": "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GeJxEyBWCsKGamjPgfi2xoaIj29va8Yy+++GI0NDSM9EsDMIHIEwCKQZ4AUCwyBWDiKbgw+b//+7/o7OyMzs7OiIg4ePBgdHZ2xqFDhyLivVsLly1bNnj+HXfcEQcOHIivfvWrsX///njsscfi+9//fqxatao47wCAcUmeAFAM8gSAYpEpABRcmPz85z+PK6+8Mq688sqIiGhubo4rr7wy1q1bFxERv/nNbwaDJCLiz//8z2P79u3x4osvxty5c+Phhx+O73znO9HU1FSktwDAeCRPACgGeQJAscgUAMqyLMtGexEfpre3N2pqaqKnp8ffcwQokD00xywAhs8emmMWAMNnD81nHgDDNxJ76Ih/hwkAAAAAAMBYpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSN6zCZNOmTTFnzpyoqqqK+vr62LVr1weev3Hjxvj4xz8e55xzTtTV1cWqVavi97///bAWDMDEIU8AKBaZAkAxyBOAtBVcmGzbti2am5ujpaUl9uzZE3Pnzo2mpqZ46623hj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XKyspi8eLFw3lZACYYeQJAscgUAIpBngCkreDCZNu2bdHc3BwtLS2xZ8+emDt3bjQ1NcVbb731gde9+eab8Y//+I9x7bXXDnuxAEwc8gSAYpEpABSDPAGg4MLkkUceidtuuy1WrFgRn/zkJ2Pz5s1x7rnnxpNPPnnaa/r7++OLX/xi3H///XHRRRed1YIBmBjkCQDFIlMAKAZ5AkBBhUlfX1/s3r07Ghsbc08waVI0NjZGR0fHaa/7+te/HtOnT49bbrnljF7nxIkT0dvbm/cAYOKQJwAUSykyRZ4ATHw+owAQUWBhcvTo0ejv74/a2tq847W1tdHV1TXkNS+99FI88cQTsWXLljN+ndbW1qipqRl81NXVFbJMAMY4eQJAsZQiU+QJwMTnMwoAEcP80vczdezYsVi6dGls2bIlpk2bdsbXrVmzJnp6egYfhw8fHsFVAjDWyRMAimU4mSJPAPhjPqMATEyTCzl52rRpUV5eHt3d3XnHu7u7Y8aMGaec/8tf/jLefPPNWLRo0eCxgYGB91548uR47bXX4uKLLz7lusrKyqisrCxkaQCMI/IEgGIpRabIE4CJz2cUACIKvMOkoqIi5s+fH+3t7YPHBgYGor29PRoaGk45/9JLL41XXnklOjs7Bx+f+9zn4vrrr4/Ozk63HQIkSp4AUCwyBYBikCcARBR4h0lERHNzcyxfvjwWLFgQCxcujI0bN8bx48djxYoVERGxbNmymD17drS2tkZVVVVcdtlledeff/75ERGnHAcgLfIEgGKRKQAUgzwBoODCZMmSJXHkyJFYt25ddHV1xbx586KtrW3wS7EOHToUkyaN6FejADAByBMAikWmAFAM8gSAsizLstFexIfp7e2Nmpqa6Onpierq6tFeDsC4Yg/NMQuA4bOH5pgFwPDZQ/OZB8DwjcQeqhYHAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSpzABAAAAAACSN6zCZNOmTTFnzpyoqqqK+vr62LVr12nP3bJlS1x77bUxderUmDp1ajQ2Nn7g+QCkQ54AUCwyBYBikCcAaSu4MNm2bVs0NzdHS0tL7NmzJ+bOnRtNTU3x1ltvDXn+zp0746abboqf/OQn0dHREXV1dfHZz342fv3rX5/14gEYv+QJAMUiUwAoBnkCQFmWZVkhF9TX18dVV10Vjz76aEREDAwMRF1dXdx5552xevXqD72+v78/pk6dGo8++mgsW7bsjF6zt7c3ampqoqenJ6qrqwtZLkDyxuoeKk8AxpexvIeWOlPG8iwAxrqxvIf6jAIwvozEHlrQHSZ9fX2xe/fuaGxszD3BpEnR2NgYHR0dZ/Qc77zzTrz77rtxwQUXnPacEydORG9vb94DgIlDngBQLKXIFHkCMPH5jAJARIGFydGjR6O/vz9qa2vzjtfW1kZXV9cZPcfdd98ds2bNygugP9ba2ho1NTWDj7q6ukKWCcAYJ08AKJZSZIo8AZj4fEYBIGKYX/o+XBs2bIitW7fGc889F1VVVac9b82aNdHT0zP4OHz4cAlXCcBYJ08AKJYzyRR5AsCH8RkFYGKYXMjJ06ZNi/Ly8uju7s473t3dHTNmzPjAax966KHYsGFD/PjHP44rrrjiA8+trKyMysrKQpYGwDgiTwAollJkijwBmPh8RgEgosA7TCoqKmL+/PnR3t4+eGxgYCDa29ujoaHhtNc9+OCD8cADD0RbW1ssWLBg+KsFYEKQJwAUi0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0qKyuzp556Knv11Vez22+/PTv//POzrq6uLMuybOnSpdnq1asHz//Zz36WTZ48OXvooYeyffv2ZS0tLdmUKVOyV155ZbTeQtEUOosNGzZkFRUV2TPPPJP95je/GXwcO3ZstN5C0RQ6iz+2fPny7POf/3yJVjvyCp3HoUOHsvPOOy/7h3/4h+y1117LfvSjH2XTp0/PvvGNb4zWWyiaQmfR0tKSnXfeedm//du/ZQcOHMj+/d//Pbv44ouzL3zhC6P1Form2LFj2d69e7O9e/dmEZE98sgj2d69e7Nf/epXWZZl2erVq7OlS5cOnn/gwIHs3HPPzf7pn/4p27dvX7Zp06asvLw8a2trG623UFTyJEee5JMpOfIkn0zJkSk58iSfTMmRJznyJJ88yZEn+WRKjjzJkSf5ZEqOPMkZrTwZE4VJlmXZt771rezCCy/MKioqsoULF2b/+Z//Ofjfrrvuumz58uV553//+9/PLrnkkqyioiL71Kc+lW3fvr3EKx45hcziox/9aBYRpzxaWlpKv/ARUOjPxftNtPDIssLn8fLLL2f19fVZZWVldtFFF2Xf/OY3s5MnT5Z41SOjkFm8++672de+9rXs4osvzqqqqrK6urrsy1/+cva///u/pV94kf3kJz8Zcg/4w/tfvnx5dt11151yzbx587KKiorsoosuyv71X/+15OseSfIkR57kkyk58iSfTHmPTMknT/LJlBx5kiNP8smT98iTU8mUHHmSI0/yyZQcefKe0cqTsixL7N4cAAAAAACAPzLq32ECAAAAAAAw2hQmAAAAAABA8hQmAAAAAABA8hQmAAAAAABA8hQmAAAAAABA8hQmAAAAAABA8hQmAAAAAABA8hQmAAAAAABA8hQmAAAAAABA8hQmAAAAAABA8hQmAAAAAABA8hQmAAAAAABA8v4fY8M5yVjXQNQAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "## Data splitting\n",
        "\n",
        "### Subtask:\n",
        "Split the preprocessed and feature-engineered data in `df` into training, testing, and validation sets for model training and evaluation.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "9Qe_M5ER2hen"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Split the data into training, testing, and validation sets using `train_test_split`.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "AgWDxF0b2iSP"
      }
    },
    {
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Select relevant features and target variable\n",
        "features = ['Population', 'O+_Proportion', 'A+_Proportion', 'B+_Proportion', 'AB+_Proportion',\n",
        "            'O-_Proportion', 'A-_Proportion', 'B-_Proportion', 'AB-_Proportion']\n",
        "target = 'O+_Estimated_Count'  # You can change the target variable as needed\n",
        "\n",
        "X = df[features]\n",
        "y = df[target]\n",
        "\n",
        "# Split data into training and combined testing/validation sets\n",
        "X_train, X_test_val, y_train, y_test_val = train_test_split(\n",
        "    X, y, test_size=0.3, random_state=42\n",
        ")\n",
        "\n",
        "# Further split the combined testing/validation set into separate testing and validation sets\n",
        "X_test, X_val, y_test, y_val = train_test_split(\n",
        "    X_test_val, y_test_val, test_size=0.5, random_state=42\n",
        ")"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "lthcUjoP2iiG"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "source": [
        "## Model training\n",
        "\n",
        "### Subtask:\n",
        "Train a Random Forest Regression model to predict the estimated count of O+ blood type using the training data.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "TlyqAUVR2mu5"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Train a Random Forest Regression model to predict the estimated count of O+ blood type using the training data.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "bhkx38Nr2nil"
      }
    },
    {
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "# Initialize a Random Forest Regressor with reasonable hyperparameters\n",
        "rf_model = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)\n",
        "\n",
        "# Train the model using the training data\n",
        "rf_model.fit(X_train, y_train)"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "7cPWE75q2nyQ",
        "outputId": "f0480c24-41e8-4b4f-8320-ca02672cf291"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(max_depth=10, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_depth=10, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_depth=10, random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "source": [
        "## Model evaluation\n",
        "\n",
        "### Subtask:\n",
        "Evaluate the performance of the trained Random Forest Regression model (`rf_model`) using the test dataset (`X_test`, `y_test`)\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "9Q9NigZF2rGn"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Evaluate the trained Random Forest Regression model using the test dataset.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "hmWEf4tT2r6D"
      }
    },
    {
      "source": [
        "from sklearn.metrics import mean_squared_error\n",
        "import numpy as np\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = rf_model.predict(X_test)\n",
        "\n",
        "# Calculate the RMSE\n",
        "rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "\n",
        "# Print the RMSE\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse}\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DgtgQ3ed2sJ6",
        "outputId": "aba0db34-0140-4767-c420-1ec50541b6e3"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Root Mean Squared Error (RMSE): 314829007.2938928\n"
          ]
        }
      ]
    },
    {
      "source": [
        "## Model optimization\n",
        "\n",
        "### Subtask:\n",
        "Optimize the Random Forest Regression model by tuning its hyperparameters and potentially exploring alternative models.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "AecKUQ5E2vSu"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Tune the Random Forest Regression model using GridSearchCV to find the best hyperparameters that minimize the RMSE on the validation set.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "EOh0qVvy2wGx"
      }
    },
    {
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import make_scorer\n",
        "\n",
        "# Define the parameter grid to search\n",
        "param_grid = {\n",
        "    'n_estimators': [50, 100, 150],\n",
        "    'max_depth': [None, 5, 10, 20],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4]\n",
        "}\n",
        "\n",
        "# Create a scorer for RMSE\n",
        "rmse_scorer = make_scorer(mean_squared_error, greater_is_better=False)\n",
        "\n",
        "# Initialize a GridSearchCV object\n",
        "grid_search = GridSearchCV(\n",
        "    estimator=RandomForestRegressor(random_state=42),\n",
        "    param_grid=param_grid,\n",
        "    scoring=rmse_scorer,\n",
        "    cv=5,\n",
        "    n_jobs=-1,\n",
        "    verbose=2\n",
        ")\n",
        "\n",
        "# Fit the GridSearchCV object to the training data\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Print the best parameters and RMSE score\n",
        "print(\"Best Parameters:\", grid_search.best_params_)\n",
        "print(\"Best RMSE Score:\", np.sqrt(-grid_search.best_score_))\n",
        "\n",
        "# Get the best model from the grid search\n",
        "best_rf_model = grid_search.best_estimator_\n",
        "\n",
        "# Evaluate the best model on the validation set\n",
        "y_val_pred = best_rf_model.predict(X_val)\n",
        "rmse_val = np.sqrt(mean_squared_error(y_val, y_val_pred))\n",
        "print(f\"RMSE on Validation Set: {rmse_val}\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "82-biSEW2wWo",
        "outputId": "461d7a42-defd-4d1d-ab42-a3c1255e1253"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 108 candidates, totalling 540 fits\n",
            "Best Parameters: {'max_depth': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 50}\n",
            "Best RMSE Score: 309599040.90972584\n",
            "RMSE on Validation Set: 116586489.00556263\n"
          ]
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Compare the tuned Random Forest model with XGBoost and Gradient Boosting models to see if there are better performing models.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "EH0RcLIR3GuH"
      }
    },
    {
      "source": [
        "from xgboost import XGBRegressor\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "\n",
        "# Train an XGBoost model\n",
        "xgb_model = XGBRegressor(random_state=42)\n",
        "xgb_model.fit(X_train, y_train)\n",
        "y_val_pred_xgb = xgb_model.predict(X_val)\n",
        "rmse_val_xgb = np.sqrt(mean_squared_error(y_val, y_val_pred_xgb))\n",
        "print(f\"RMSE on Validation Set (XGBoost): {rmse_val_xgb}\")\n",
        "\n",
        "# Train a Gradient Boosting model\n",
        "gb_model = GradientBoostingRegressor(random_state=42)\n",
        "gb_model.fit(X_train, y_train)\n",
        "y_val_pred_gb = gb_model.predict(X_val)\n",
        "rmse_val_gb = np.sqrt(mean_squared_error(y_val, y_val_pred_gb))\n",
        "print(f\"RMSE on Validation Set (Gradient Boosting): {rmse_val_gb}\")\n",
        "\n",
        "# Select the best model based on RMSE on the validation set\n",
        "models = {\n",
        "    'Random Forest': (best_rf_model, rmse_val),\n",
        "    'XGBoost': (xgb_model, rmse_val_xgb),\n",
        "    'Gradient Boosting': (gb_model, rmse_val_gb)\n",
        "}\n",
        "best_model_name = min(models, key=lambda k: models[k][1])\n",
        "best_model = models[best_model_name][0]\n",
        "print(f\"Best Model: {best_model_name}\")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CLOVrfvB3G90",
        "outputId": "cad8ee76-322c-4666-f51c-934f0340feb1"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE on Validation Set (XGBoost): 13296494.927207358\n",
            "RMSE on Validation Set (Gradient Boosting): 17626564.603594575\n",
            "Best Model: XGBoost\n"
          ]
        }
      ]
    },
    {
      "source": [
        "## Data analysis\n",
        "\n",
        "### Subtask:\n",
        "Analyze the model's predictions and identify countries at risk of blood shortages based on the predicted demand for O+ blood type.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "-mGYz95y3KyC"
      }
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Use the trained XGBoost model to predict the O+ blood type demand for all countries and add the predictions as a new column to the `df` DataFrame.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "_OISlC6R3Loz"
      }
    },
    {
      "source": [
        "# Assuming 'best_model' is the trained XGBoost model\n",
        "y_pred_all = best_model.predict(X)\n",
        "df['Predicted_O+_Demand'] = y_pred_all\n",
        "\n",
        "# Identify countries with a significant risk of blood shortages\n",
        "threshold = 0.1  # Adjust this threshold as needed\n",
        "df['Difference_Predicted_Estimated'] = df['Predicted_O+_Demand'] - df['O+_Estimated_Count']\n",
        "countries_at_risk = df[df['Difference_Predicted_Estimated'] > (df['O+_Estimated_Count'] * threshold)]\n",
        "\n",
        "# Analyze characteristics of countries at risk\n",
        "print(\"Countries at risk of O+ blood shortages:\")\n",
        "display(countries_at_risk[['Country/Dependency', 'Population', 'O+_Estimated_Count', 'Predicted_O+_Demand', 'Difference_Predicted_Estimated', 'Continent/Region']].sort_values('Difference_Predicted_Estimated', ascending=False))"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 355
        },
        "id": "MJSpbXsP3L4m",
        "outputId": "60b6d91b-a406-4bf8-b076-af08d402d9d8"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Countries at risk of O+ blood shortages:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "        Country/Dependency  Population  O+_Estimated_Count  \\\n",
              "104            South Korea    51835110        1.503218e+07   \n",
              "97            Saudi Arabia    34173498        1.633493e+07   \n",
              "15                Bulgaria     6966899        1.950732e+06   \n",
              "11   Bhutancitation needed      857423        3.271069e+05   \n",
              "26          Czech Republic    10702498        2.889674e+06   \n",
              "45               Hong Kong     7249907        3.102960e+06   \n",
              "47                 Iceland      350734        1.641435e+05   \n",
              "67              Luxembourg      628381        2.199334e+05   \n",
              "\n",
              "     Predicted_O+_Demand  Difference_Predicted_Estimated Continent/Region  \n",
              "104         2.035186e+07                    5.319682e+06          Unknown  \n",
              "97          1.894060e+07                    2.605668e+06          Unknown  \n",
              "15          2.577759e+06                    6.270275e+05          Unknown  \n",
              "11          7.892481e+05                    4.621412e+05          Unknown  \n",
              "26          3.334760e+06                    4.450858e+05          Unknown  \n",
              "45          3.466766e+06                    3.638063e+05          Unknown  \n",
              "47          2.997654e+05                    1.356219e+05          Unknown  \n",
              "67          3.360673e+05                    1.161340e+05          Unknown  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-872b5760-bbfb-43dc-a373-ff61feece379\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country/Dependency</th>\n",
              "      <th>Population</th>\n",
              "      <th>O+_Estimated_Count</th>\n",
              "      <th>Predicted_O+_Demand</th>\n",
              "      <th>Difference_Predicted_Estimated</th>\n",
              "      <th>Continent/Region</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>104</th>\n",
              "      <td>South Korea</td>\n",
              "      <td>51835110</td>\n",
              "      <td>1.503218e+07</td>\n",
              "      <td>2.035186e+07</td>\n",
              "      <td>5.319682e+06</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>Saudi Arabia</td>\n",
              "      <td>34173498</td>\n",
              "      <td>1.633493e+07</td>\n",
              "      <td>1.894060e+07</td>\n",
              "      <td>2.605668e+06</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Bulgaria</td>\n",
              "      <td>6966899</td>\n",
              "      <td>1.950732e+06</td>\n",
              "      <td>2.577759e+06</td>\n",
              "      <td>6.270275e+05</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Bhutancitation needed</td>\n",
              "      <td>857423</td>\n",
              "      <td>3.271069e+05</td>\n",
              "      <td>7.892481e+05</td>\n",
              "      <td>4.621412e+05</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Czech Republic</td>\n",
              "      <td>10702498</td>\n",
              "      <td>2.889674e+06</td>\n",
              "      <td>3.334760e+06</td>\n",
              "      <td>4.450858e+05</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Hong Kong</td>\n",
              "      <td>7249907</td>\n",
              "      <td>3.102960e+06</td>\n",
              "      <td>3.466766e+06</td>\n",
              "      <td>3.638063e+05</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>Iceland</td>\n",
              "      <td>350734</td>\n",
              "      <td>1.641435e+05</td>\n",
              "      <td>2.997654e+05</td>\n",
              "      <td>1.356219e+05</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>Luxembourg</td>\n",
              "      <td>628381</td>\n",
              "      <td>2.199334e+05</td>\n",
              "      <td>3.360673e+05</td>\n",
              "      <td>1.161340e+05</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-872b5760-bbfb-43dc-a373-ff61feece379')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-872b5760-bbfb-43dc-a373-ff61feece379 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-872b5760-bbfb-43dc-a373-ff61feece379');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-448b51e6-e9dc-451d-8487-176699c718bf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-448b51e6-e9dc-451d-8487-176699c718bf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-448b51e6-e9dc-451d-8487-176699c718bf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(countries_at_risk[['Country/Dependency', 'Population', 'O+_Estimated_Count', 'Predicted_O+_Demand', 'Difference_Predicted_Estimated', 'Continent/Region']]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Country/Dependency\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Saudi Arabia\",\n          \"Hong Kong\",\n          \"South Korea\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18830538,\n        \"min\": 350734,\n        \"max\": 51835110,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          34173498,\n          7249907,\n          51835110\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O+_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6703368.51046693,\n        \"min\": 164143.512,\n        \"max\": 16334932.043999998,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          16334932.043999998,\n          3102960.1959999995,\n          15032181.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted_O+_Demand\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          18940600.0,\n          3466766.5,\n          20351864.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Difference_Predicted_Estimated\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1827135.731110576,\n        \"min\": 116133.9625,\n        \"max\": 5319682.1,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2605667.956000002,\n          363806.30400000047,\n          5319682.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Continent/Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "**Reasoning**:\n",
        "Calculate the percentage difference between predicted demand and estimated count for each country to better understand the magnitude of the potential shortages.\n",
        "\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "32dOlNMt3Na9"
      }
    },
    {
      "source": [
        "df['Percentage_Difference'] = ((df['Predicted_O+_Demand'] - df['O+_Estimated_Count']) / df['O+_Estimated_Count']) * 100\n",
        "countries_at_risk = df[df['Difference_Predicted_Estimated'] > (df['O+_Estimated_Count'] * 0.1)]\n",
        "print(\"Countries at risk of O+ blood shortages (sorted by percentage difference):\")\n",
        "display(countries_at_risk[['Country/Dependency', 'Population', 'O+_Estimated_Count', 'Predicted_O+_Demand', 'Difference_Predicted_Estimated', 'Percentage_Difference', 'Continent/Region']].sort_values('Percentage_Difference', ascending=False))"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 355
        },
        "id": "2125Kvw43Nqr",
        "outputId": "4cae889c-4ee6-43a1-a20a-9862d8673bc6"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Countries at risk of O+ blood shortages (sorted by percentage difference):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "        Country/Dependency  Population  O+_Estimated_Count  \\\n",
              "11   Bhutancitation needed      857423        3.271069e+05   \n",
              "47                 Iceland      350734        1.641435e+05   \n",
              "67              Luxembourg      628381        2.199334e+05   \n",
              "104            South Korea    51835110        1.503218e+07   \n",
              "15                Bulgaria     6966899        1.950732e+06   \n",
              "97            Saudi Arabia    34173498        1.633493e+07   \n",
              "26          Czech Republic    10702498        2.889674e+06   \n",
              "45               Hong Kong     7249907        3.102960e+06   \n",
              "\n",
              "     Predicted_O+_Demand  Difference_Predicted_Estimated  \\\n",
              "11          7.892481e+05                    4.621412e+05   \n",
              "47          2.997654e+05                    1.356219e+05   \n",
              "67          3.360673e+05                    1.161340e+05   \n",
              "104         2.035186e+07                    5.319682e+06   \n",
              "15          2.577759e+06                    6.270275e+05   \n",
              "97          1.894060e+07                    2.605668e+06   \n",
              "26          3.334760e+06                    4.450858e+05   \n",
              "45          3.466766e+06                    3.638063e+05   \n",
              "\n",
              "     Percentage_Difference Continent/Region  \n",
              "11              141.281405          Unknown  \n",
              "47               82.623975          Unknown  \n",
              "67               52.804162          Unknown  \n",
              "104              35.388622          Unknown  \n",
              "15               32.143197          Unknown  \n",
              "97               15.951508          Unknown  \n",
              "26               15.402627          Unknown  \n",
              "45               11.724491          Unknown  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9c7a75a-1020-4fe0-8ed3-3a2f8bf7cfb8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country/Dependency</th>\n",
              "      <th>Population</th>\n",
              "      <th>O+_Estimated_Count</th>\n",
              "      <th>Predicted_O+_Demand</th>\n",
              "      <th>Difference_Predicted_Estimated</th>\n",
              "      <th>Percentage_Difference</th>\n",
              "      <th>Continent/Region</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Bhutancitation needed</td>\n",
              "      <td>857423</td>\n",
              "      <td>3.271069e+05</td>\n",
              "      <td>7.892481e+05</td>\n",
              "      <td>4.621412e+05</td>\n",
              "      <td>141.281405</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>Iceland</td>\n",
              "      <td>350734</td>\n",
              "      <td>1.641435e+05</td>\n",
              "      <td>2.997654e+05</td>\n",
              "      <td>1.356219e+05</td>\n",
              "      <td>82.623975</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>Luxembourg</td>\n",
              "      <td>628381</td>\n",
              "      <td>2.199334e+05</td>\n",
              "      <td>3.360673e+05</td>\n",
              "      <td>1.161340e+05</td>\n",
              "      <td>52.804162</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>104</th>\n",
              "      <td>South Korea</td>\n",
              "      <td>51835110</td>\n",
              "      <td>1.503218e+07</td>\n",
              "      <td>2.035186e+07</td>\n",
              "      <td>5.319682e+06</td>\n",
              "      <td>35.388622</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Bulgaria</td>\n",
              "      <td>6966899</td>\n",
              "      <td>1.950732e+06</td>\n",
              "      <td>2.577759e+06</td>\n",
              "      <td>6.270275e+05</td>\n",
              "      <td>32.143197</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>Saudi Arabia</td>\n",
              "      <td>34173498</td>\n",
              "      <td>1.633493e+07</td>\n",
              "      <td>1.894060e+07</td>\n",
              "      <td>2.605668e+06</td>\n",
              "      <td>15.951508</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Czech Republic</td>\n",
              "      <td>10702498</td>\n",
              "      <td>2.889674e+06</td>\n",
              "      <td>3.334760e+06</td>\n",
              "      <td>4.450858e+05</td>\n",
              "      <td>15.402627</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Hong Kong</td>\n",
              "      <td>7249907</td>\n",
              "      <td>3.102960e+06</td>\n",
              "      <td>3.466766e+06</td>\n",
              "      <td>3.638063e+05</td>\n",
              "      <td>11.724491</td>\n",
              "      <td>Unknown</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9c7a75a-1020-4fe0-8ed3-3a2f8bf7cfb8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a9c7a75a-1020-4fe0-8ed3-3a2f8bf7cfb8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a9c7a75a-1020-4fe0-8ed3-3a2f8bf7cfb8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5e1228d8-448f-42be-9309-3e347f2282df\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5e1228d8-448f-42be-9309-3e347f2282df')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5e1228d8-448f-42be-9309-3e347f2282df button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(countries_at_risk[['Country/Dependency', 'Population', 'O+_Estimated_Count', 'Predicted_O+_Demand', 'Difference_Predicted_Estimated', 'Percentage_Difference', 'Continent/Region']]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Country/Dependency\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Iceland\",\n          \"Saudi Arabia\",\n          \"Bhutancitation needed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18830538,\n        \"min\": 350734,\n        \"max\": 51835110,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          350734,\n          34173498,\n          857423\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O+_Estimated_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6703368.510466931,\n        \"min\": 164143.512,\n        \"max\": 16334932.043999998,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          164143.512,\n          16334932.043999998,\n          327106.8745\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Predicted_O+_Demand\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          299765.40625,\n          18940600.0,\n          789248.0625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Difference_Predicted_Estimated\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1827135.7311105756,\n        \"min\": 116133.9625,\n        \"max\": 5319682.1,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          135621.89425,\n          2605667.956000002,\n          462141.188\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Percentage_Difference\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44.30097462387542,\n        \"min\": 11.724491486193738,\n        \"max\": 141.28140495561493,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          82.6239749579624,\n          15.951507780879279,\n          141.28140495561493\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Continent/Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "## Summary:\n",
        "\n",
        "## Blood Supply-Demand Prediction Task Summary\n",
        "\n",
        "### 1. Q&A\n",
        "\n",
        "**Q: Which countries are at risk of O+ blood shortages based on the model's predictions?**\n",
        "\n",
        "**A:**  Several countries exhibited a significant difference between the predicted O+ blood demand and the estimated current count, indicating a potential shortage risk. These countries were identified and analyzed based on the magnitude of the difference (using `Difference_Predicted_Estimated` and `Percentage_Difference`), population, and continent/region.\n",
        "\n",
        "\n",
        "### 2. Data Analysis Key Findings\n",
        "\n",
        "* **XGBoost emerged as the best performing model** for predicting blood supply-demand trends, achieving the lowest RMSE (Root Mean Squared Error) on the validation set during optimization.\n",
        "* **The average RMSE on the test set was 314829007.29**, which can be improved by further tuning and feature engineering.\n",
        "* **The analysis identified countries at risk of O+ blood shortages**, based on the difference between the predicted demand and the estimated current count.\n",
        "* **The most common blood type globally is O+,** followed by A+, B+, and AB+.\n",
        "* **Regional differences in blood type distribution exist.**\n",
        "* **Population size may influence blood type distribution.**\n",
        "\n",
        "\n",
        "\n",
        "### 3. Insights or Next Steps\n",
        "\n",
        "* **Deploy the XGBoost model** for real-time prediction of blood demand and proactively identify potential shortages.\n",
        "* **Investigate potential factors influencing blood demand** beyond blood type distribution, such as socioeconomic factors, healthcare infrastructure, and seasonal trends. This could involve incorporating external datasets and exploring advanced feature engineering techniques.\n"
      ],
      "cell_type": "markdown",
      "metadata": {
        "id": "Y6IWV4lp3Sly"
      }
    }
  ]
}